// Generated by CoffeeScript 1.6.2
(function() {
  'RequireJS provides Asynchronous Module Definition loading, but we first must configure a few of our libraries to work with it. This includes Handlebars because it does not support AMD natively. The `shim` argument configures \nRequireJS to wrap scripts so that other modules can use them as injected, modular dependencies.\n\nFor `Video.js` and `ResponseSlives.js`, specify that they depend upon `jQuery`.';  requirejs.config({
    shim: {
      handlebars: {
        exports: 'Handlebars'
      },
      'underscore-min': {
        exports: '_'
      },
      'backbone-min': {
        deps: ['underscore-min'],
        exports: 'Backbone'
      },
      'responsiveslides.min': ['jquery'],
      'bootstrap.min': ['jquery'],
      video: ['jquery']
    }
  });

  define('catalogApp', [], function() {
    return {};
  });

  'Now, we configure this `main` module by specifing which modules it needs to operate by calling the \n`require` function and passing in an array of modules to inject. \n\nNotice that we only declare three formal arguments because those are the only ones we actually need to \nreference in our initialization function, but since event handler and other UI code requires the other \nlibraries, we ensure that they get loaded now before initialization.';

  require(['handlebars', 'jquery', 'moment', 'entryModel', 'catalogApp', 'entryViews', 'backbone-min', 'bootstrap.min', 'video', 'responsiveslides.min'], function(Handlebars, $, moment, EntryModel, catalogApp) {
    'When all the modules are injected, we will use jQuery\'s AJAX support through `$.get` to fetch the \ndata from our Windows Azure hosted REST service. Internally, the web service pulls the data out of MongoDB, \nwhich is itself hosted via MongoLabs.\n\nBut, we do need to declare and initialize our functions first.';
    'To load external template files, we use this function, which relies on some great asynchronous convenience \nfunctions in jQuery';
    var bindCatalogEntry, initializeMediaSlider, resizeVideoJS, runTemplate, templateLoader, videoControl;

    templateLoader = {
      load: function(viewNames, callback) {
        var deferreds;

        deferreds = [];
        $.each(viewNames, function(index, view) {
          if (catalogApp[view]) {
            return deferreds.push($.get("tpl/" + view + ".html", function(data) {
              var template;

              template = Handlebars.compile(data);
              return catalogApp[view].prototype.template = template;
            }, "html"));
          } else {
            return alert(view + " not found");
          }
        });
        return $.when.apply(null, deferreds).done(callback);
      }
    };
    catalogApp.Router = Backbone.Router.extend({
      routes: {
        "entries/:id": "entryDetails",
        "": "home"
      },
      home: function() {
        return this.entryDetails('v1clarityppm');
      },
      entryDetails: function(id) {
        var entry;

        entry = new catalogApp.EntryModel({
          id: "http://versionone.com/" + id
        });
        return entry.fetch({
          success: function(data) {
            resizeVideoJS();
            initializeMediaSlider();
            $("#content").html(new catalogApp.EntryDetailsView({
              model: data
            }).render().el);
            return bindCatalogEntry(data.attributes);
          }
        });
      }
    });
    'The most important function is `bindCatalogEntry`. It takes care of formating the catalog entry and \npopulating / configuring the templated items with data, delegating most of the work to Handlebars templates, \nand calling a few jQuery Mobile functions to enhance the HTML controls in their JQM-ified selves.';
    bindCatalogEntry = function(entry) {};
    initializeMediaSlider = function() {
      return $('.rslides').responsiveSlides({
        auto: false,
        pager: true,
        nav: true,
        speed: 500,
        maxwidth: 800,
        navContainer: '#navContainer',
        namespace: 'centered-btns',
        before: function() {
          return videoControl(function(video) {
            return video.pause();
          });
        }
      });
    };
    'This utility function makes calling Handlebars templates easier.';
    runTemplate = function(source, target, data) {
      var html, template;

      source = $(source).html();
      template = Handlebars.compile(source);
      html = template(data);
      return $(target).html(html);
    };
    'Register some formatting helpers for Handlebars to handle dates and the custom video tag content from our schema.';
    Handlebars.registerHelper('dateFormat', function(context, block) {
      var f;

      if (window.moment) {
        f = block.hash.format || 'MMM DD, YYYY';
        return moment(context).format(f);
      } else {
        return context;
      }
    });
    Handlebars.registerHelper('renderContent', function(content) {
      return new Handlebars.SafeString(content);
    });
    'The `videoControl` function uses jQuery to match all elements with a class of `video-js` \nso that we can pause and resize all instances of videos on the screen at once when navigating \nwith the `ResponseSlives.js` plugin.';
    videoControl = function(callback) {
      return $('.video-js').each(function() {
        var id, video;

        id = $(this).attr('id');
        'The crazy `_V_` function comes from the Video.js library, and it requires an id attribute \non elements to match.';
        video = _V_(id);
        return callback(video);
      });
    };
    'And, this provides responsive support for resizing the videos or images when the browser window size changes.';
    resizeVideoJS = function() {
      var aspectRatio;

      aspectRatio = 504 / 640;
      return videoControl(function(video) {
        var width;

        width = document.getElementById(video.id).parentElement.offsetWidth;
        return video.width(width).height(width * aspectRatio);
      });
    };
    'Load the app now:';
    window.onresize = resizeVideoJS;
    resizeVideoJS();
    return templateLoader.load(['EntryDetailsView', 'EntryDetailsInfoView', 'EntryUpdatesView'], function() {
      var app;

      app = new catalogApp.Router();
      return Backbone.history.start();
    });
  });

}).call(this);
